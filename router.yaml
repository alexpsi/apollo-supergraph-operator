telemetry:
  experimental_logging:
    format: json 
  metrics:
    common:
      service_namespace: "default"
      service_name: router
      buckets:
        - 0.1
    prometheus:
      enabled: true
      path: /metrics
    otlp:
      enabled: true

# apq:
#   subgraph:
#     # Disables subgraph APQ globally except where overridden per-subgraph
#     all:
#       enabled: false
#     # Override global APQ setting for individual subgraphs
#     subgraphs:
#       products:
#         enabled: true

# traffic_shaping:
#   router: # Rules applied to requests from clients to the router
#     global_rate_limit: # Accept a maximum of 10 requests per 5 secs. Excess requests must be rejected.
#       capacity: 10
#       interval: 5s # Must not be greater than 18_446_744_073_709_551_615 milliseconds and not less than 0 milliseconds
#     timeout: 50s # If a request to the router takes more than 50secs then cancel the request (30 sec by default)
#   all:
#     deduplicate_query: true # Enable query deduplication for all subgraphs.
#     compression: br # Enable brotli compression for all subgraphs.
#   subgraphs: # Rules applied to requests from the router to individual subgraphs
#     products:
#       deduplicate_query: false # Disable query deduplication for the products subgraph.
#       compression: gzip # Enable gzip compression only for the products subgraph.
#       global_rate_limit: # Accept a maximum of 10 requests per 5 secs from the router. Excess requests must be rejected.
#         capacity: 10
#         interval: 5s # Must not be greater than 18_446_744_073_709_551_615 milliseconds and not less than 0 milliseconds
#       timeout: 50s # If a request to the subgraph 'products' takes more than 50secs then cancel the request (30 sec by default)
#       experimental_retry:
#         min_per_sec: 10 # minimal number of retries per second (`min_per_sec`, default is 10 retries per second)
#         ttl: 10s # for each successful request, we register a token, that expires according to this option (default: 10s)
#         retry_percent: 0.2 # defines the proportion of available retries to the current number of tokens
#         retry_mutations: false # allows retries on mutations. This should only be enabled if mutations are idempotent
#       experimental_http2: enable # Configures HTTP/2 usage. Can be 'enable' (default), 'disable' or 'http2only'